import json
from pathlib import Path

async def extract_subsections_tree(input_root: str, output_root: str, schema: dict) -> None:
    """
    Walk input_root recursively. For every page file (page_* or *.txt),
    call `structure(schema=schema, input=<file text>)` and write the JSON
    to the mirrored path under output_root with the same name but .json.
    """
    in_root = Path(input_root).resolve()
    out_root = Path(output_root).resolve()
    out_root.mkdir(parents=True, exist_ok=True)

    # Collect candidate files (page_* or *.txt), depth-first, sorted for stability
    candidates = []
    for p in sorted(in_root.rglob("*")):
        if p.is_file() and (p.name.startswith("page_") or p.suffix.lower() == ".txt"):
            candidates.append(p)

    for src in candidates:
        rel = src.relative_to(in_root)                 # keep subfolder structure
        out_path = (out_root / rel).with_suffix(".json")
        out_path.parent.mkdir(parents=True, exist_ok=True)

        # Read OCR text
        with open(src, "r", encoding="utf-8", errors="ignore") as f:
            input_text = f.read()

        # Call your Structure API wrapper (sequential await)
        try:
            resp = await structure(schema=schema, input=input_text)
        except Exception as e:
            print(f"[SKIP] {src} -> error: {e}")
            continue

        # Save JSON alongside mirrored path
        with open(out_path, "w", encoding="utf-8") as f:
            json.dump(resp, f, ensure_ascii=False, indent=2)

        print(f"[OK] {src} -> {out_path}")

# ---- usage (in your notebook cell) ----
# with open("subsections_schema.json", "r", encoding="utf-8") as f:
#     json_schema = json.load(f)
# await extract_subsections_tree(
#     input_root="/path/to/your/input_folder",
#     output_root="/path/to/output_final",
#     schema=json_schema
# )
