from pathlib import Path
import re

# --- Parsers ---
STAR_LINE_SPLIT = re.compile(r'^\s*\*{3,}\s*$', re.M)  # lines like ********
FIELD_PATTERNS = [
    re.compile(r'^(?P<key>[^:=\n]+?)\s+is\s+(?P<val>.*)$', re.I),
    re.compile(r'^(?P<key>[^:=\n]+?)\s*:\s*(?P<val>.*)$'),
    re.compile(r'^(?P<key>[^:=\n]+?)\s*=\s*(?P<val>.*)$'),
]

def _chunk_to_markdown(text: str) -> str:
    """Convert one chunk file's content to markdown:
       ### record
       #### field
       value
    """
    records = [s.strip() for s in STAR_LINE_SPLIT.split(text) if s.strip()]
    out = []
    for rec in records:
        out.append("### record\n")
        for raw in rec.splitlines():
            line = raw.strip()
            if not line:
                continue
            key, val = None, None
            for pat in FIELD_PATTERNS:
                m = pat.match(line)
                if m:
                    key = m.group("key").strip()
                    val = m.group("val").strip()
                    break
            if key is None:  # fallback when no pattern matches
                out.append(f"#### detail\n{line}\n")
            else:
                out.append(f"#### {key}\n{val}\n")
        out.append("")  # blank line between records
    return "\n".join(out).strip() + "\n"

# --- Main function ---
def convert_mcid_to_markdown(input_mcid_folder: str, output_root_folder: str) -> list[Path]:
    """
    Read all 'chunk_*.txt' under the given MCID folder and write Markdown-formatted .txt
    into output_root_folder / <MCID> / <same hierarchy>. Filenames are unchanged.
    """
    in_root = Path(input_mcid_folder).resolve()
    if not in_root.is_dir():
        raise FileNotFoundError(f"MCID folder not found: {in_root}")

    out_base = (Path(output_root_folder).resolve() / in_root.name)
    written = []

    for src in in_root.rglob("chunk_*.txt"):
        rel = src.relative_to(in_root)                  # keep exact hierarchy
        dst = out_base / rel                            # same filename (.txt) preserved
        dst.parent.mkdir(parents=True, exist_ok=True)

        content = src.read_text(encoding="utf-8", errors="ignore")
        md = _chunk_to_markdown(content)
        dst.write_text(md, encoding="utf-8")
        written.append(dst)

    return written

# Example:
# convert_mcid_to_markdown(
#     r".../TMV_ChatBot_Final/Normalised_Input_Jsons/74380480",
#     r".../TMV_ChatBot_Final/Normalised_Input_Markdown_Jsons"
# )
