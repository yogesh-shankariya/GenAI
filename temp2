from pathlib import Path
import re

def convert_md_to_pagewise_txt(
    input_root: str | Path,
    output_root: str | Path,
    marker_regex: str = r'(?i)<\s*ocr[_\s:-]*service[_\s:-]*page[_\s:-]*start\s*>\s*(\d+)'
) -> None:
    """
    Split each .md into page-wise .txt using markers like:
      <ocr_service_page_start>1
      <ocr_service_page_start>2
    Content between 1→2 is page 1, 2→3 is page 2, etc.
    Output: output_root/<case>/<md_stem>/page__<n>.txt
    """
    input_root = Path(input_root)
    output_root = Path(output_root)
    rx = re.compile(marker_regex)

    if not input_root.exists():
        raise FileNotFoundError(f"Input path not found: {input_root}")

    for case_dir in sorted(p for p in input_root.iterdir() if p.is_dir()):
        for md_path in sorted(case_dir.glob("*.md")):
            text = md_path.read_text(encoding="utf-8", errors="ignore")
            matches = list(rx.finditer(text))

            out_dir = output_root / case_dir.name / md_path.stem
            out_dir.mkdir(parents=True, exist_ok=True)

            if not matches:
                # No markers: dump as single page
                (out_dir / "page__1.txt").write_text(text, encoding="utf-8")
                continue

            for i, m in enumerate(matches):
                page_num = int(m.group(1))
                start = m.end()
                end = matches[i + 1].start() if i + 1 < len(matches) else len(text)
                chunk = text[start:end].strip()
                (out_dir / f"page__{page_num}.txt").write_text(chunk, encoding="utf-8")

    print(f"Done. Output written under: {output_root}")
