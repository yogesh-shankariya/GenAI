from pathlib import Path
import os
import fitz  # PyMuPDF

# --- keep your existing converter + pipeline_options objects ---

def _convert_single_pdf_to_combined_file(pdf_path: Path,
                                         out_file: Path,
                                         converter,
                                         pipeline_options,
                                         page_limit: int | None = None) -> None:
    """
    Minimal change: same per-page logic, but append all pages into one file.
    """
    out_file.parent.mkdir(parents=True, exist_ok=True)
    # start fresh for this PDF
    if out_file.exists():
        out_file.unlink()

    # count pages
    with fitz.open(pdf_path) as doc:
        total_pages = len(doc)

    pages_to_process = total_pages if page_limit is None else min(page_limit, total_pages)

    for page_num in range(1, pages_to_process + 1):
        # === your existing core logic, unchanged ===
        result = converter.convert(
            str(pdf_path),
            page_range=(page_num, page_num),
            pipeline_options=pipeline_options
        )
        # Docling exports: try both names to match your environment
        try:
            md = result.document.export_to_markdown()
        except AttributeError:
            md = result.document.export_markdown()

        # append this page's OCR to the combined file
        with open(out_file, "a", encoding="utf-8") as f:
            f.write(f"\n\n<!-- ocr-service-page-start:{page_num} -->\n")
            f.write(md)


def ocr_folder_tree_to_combined_files(input_root: str | Path,
                                      output_root: str | Path,
                                      converter,
                                      pipeline_options,
                                      ext: str = ".md",
                                      page_limit: int | None = None) -> None:
    """
    Walk input_root, mirror the hierarchy in output_root,
    and write ONE combined file per PDF with all page OCR appended.
    """
    input_root = Path(input_root).resolve()
    output_root = Path(output_root).resolve()

    for root, _dirs, files in os.walk(input_root):
        root_path = Path(root)
        for name in files:
            if not name.lower().endswith(".pdf"):
                continue

            pdf_path = root_path / name
            rel_dir = root_path.relative_to(input_root)
            out_dir = output_root / rel_dir
            out_file = out_dir / (pdf_path.stem + ext)  # change ext to ".txt" if you prefer

            _convert_single_pdf_to_combined_file(
                pdf_path=pdf_path,
                out_file=out_file,
                converter=converter,
                pipeline_options=pipeline_options,
                page_limit=page_limit
            )
            print(f"✓ {pdf_path} → {out_file}")


# assumes you already created:
# converter = DocumentConverter(...)
# pipeline_options = VlmPipelineOptions(...)

input_root  = "/path/to/your/unzipped_pdfs_root"
output_root = "/path/to/output_root"

ocr_folder_tree_to_combined_files(
    input_root=input_root,
    output_root=output_root,
    converter=converter,
    pipeline_options=pipeline_options,
    ext=".md"     # or ".txt" if you prefer
    # page_limit=10  # optional: cap pages per PDF
)
