import re
from typing import List, Dict

TAG_RE = re.compile(r"<ocr_service_page_start>(\d+)", re.IGNORECASE)

def get_page_context(pages: List[int], full_text: str) -> Dict[str, str]:
    """
    Extract page-specific slices from an OCR string that is delimited by
    tags of the form <ocr_service_page_start>N.

    Parameters
    ----------
    pages      : list[int]        page numbers to retrieve
    full_text  : str              full OCR output
    
    Returns
    -------
    dict[str, str]
        Mapping like {"Page-2": "...", "Page-5": "..."}.
        Tags themselves are excluded from the text.
    """
    # 1️⃣  locate every tag and record where that page’s content begins
    tag_positions = []                        # (page_number, content_start_offset)
    for m in TAG_RE.finditer(full_text):
        tag_positions.append((int(m.group(1)), m.end()))
    
    # 2️⃣  add sentinel to close the final page cleanly
    tag_positions.sort(key=lambda t: t[1])
    tag_positions.append((None, len(full_text)))
    
    # 3️⃣  build (start, end) bounds for each page
    bounds = {}
    for (page, start), (_, next_start) in zip(tag_positions, tag_positions[1:]):
        if page is not None:
            bounds[page] = (start, next_start)
    
    # 4️⃣  slice, scrub, and return
    result = {}
    for p in pages:
        if p in bounds:
            s, e = bounds[p]
            # remove any possible stray tags inside the slice
            clean_slice = TAG_RE.sub("", full_text[s:e]).strip()
            result[f"Page-{p}"] = clean_slice
    
    return result
