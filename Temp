```python
"""
End-to-end, offline checkbox visualiser
--------------------------------------
• Detects every checkbox on a page (`checkbox_detector.pt`)
• Classifies each box as unchecked / checked / block (`checkbox_classifier.pt`)
• Colours the outline by state and writes the label+confidence
• Saves the result and shows it inline (Jupyter-friendly)
"""

import cv2
import numpy as np
from PIL import Image
from ultralytics import YOLO
import matplotlib.pyplot as plt

# ------------------------------------------------------------------  CONFIG
DETECTOR_WT   = "checkbox_detector.pt"      # detector weights
CLASSIFIER_WT = "checkbox_classifier.pt"    # classifier weights

BOX_COLORS = {                              # BGR
    "unchecked": (242,  48,  48),   # red
    "checked":   ( 38, 115, 101),   # teal/green
    "block":     (242, 159,   5)    # amber
}
IDX2NAME = {0: "block", 1: "checked", 2: "unchecked"}

# ----------------------------------------------------------------  LOAD
DETECTOR   = YOLO(DETECTOR_WT)
CLASSIFIER = YOLO(CLASSIFIER_WT)

# ------------------------------------------------------------------  MAIN
def annotate_checkbox_page(img_path: str,
                           save_path: str = "annotated.jpg",
                           show: bool = True):
    """
    img_path  : path to scanned page
    save_path : where to write the annotated image
    show      : if True, display inline via matplotlib
    """
    #################################### 1. read + detect
    page_bgr = cv2.imread(img_path)               # BGR uint8 (H,W,3)
    det_res  = DETECTOR(page_bgr, imgsz=1280, conf=0.2)[0]
    bboxes   = det_res.boxes.xyxy.cpu().numpy()   # (N,4) float32

    #################################### 2. classify & draw
    for x1, y1, x2, y2 in bboxes:
        x1, y1, x2, y2 = map(int, (x1, y1, x2, y2))

        # ---- crop -------------------------------------------------------
        crop_bgr = page_bgr[y1:y2, x1:x2].copy()          # ensure contiguous
        crop_rgb = cv2.cvtColor(crop_bgr, cv2.COLOR_BGR2RGB)

        # ---- classify ---------------------------------------------------
        cls_res  = CLASSIFIER.predict(source=crop_rgb, imgsz=64, verbose=False)[0]
        idx      = int(cls_res.probs.top1)       # 0 | 1 | 2
        conf     = float(cls_res.probs.top1conf)
        state    = IDX2NAME[idx]

        # ---- draw box ---------------------------------------------------
        colour = BOX_COLORS[state]
        cv2.rectangle(page_bgr, (x1, y1), (x2, y2), colour, thickness=2)

        # label background
        label   = f"{state} {conf:.2f}"
        (tw, th), _ = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX,
                                      0.5, 1)
        cv2.rectangle(page_bgr,
                      (x1, y1 - th - 6),
                      (x1 + tw + 4, y1),
                      colour, thickness=-1)
        cv2.putText(page_bgr, label,
                    (x1 + 2, y1 - 4),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.5, (255, 255, 255), 1, cv2.LINE_AA)

    #################################### 3. save + (optionally) show
    cv2.imwrite(save_path, page_bgr)
    if show:
        plt.figure(figsize=(8, 10))
        plt.imshow(cv2.cvtColor(page_bgr, cv2.COLOR_BGR2RGB))
        plt.axis("off")
        plt.title(f"Checkbox states • total boxes = {len(bboxes)}")
        plt.show()

# ------------------------------------------------------------------  RUN
if __name__ == "__main__":
    annotate_checkbox_page("sample.jpg", save_path="sample_annotated.jpg")
```
