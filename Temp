from pathlib import Path
import json, mimetypes, asyncio, traceback
from datetime import datetime

# --------------------------------------------------------------------
def _mime(p: Path) -> str:
    return mimetypes.guess_type(p.name)[0] or "application/octet-stream"


# --------------------------------------------------------------------
async def vision_extract_mirror_tree(
    input_root: str | Path = "Output_Files/HELIX",
    output_root: str | Path = "Output_Final/HELIX",
    prompt_path: str | Path = "prompt_1.txt",
    schema_path: str | Path = "schema.json",
    error_log: str | Path = "failed_pages.txt",
) -> None:
    """
    Convert every *.jpg under `input_root` to JSON under `output_root`,
    mirroring the folder tree. Skips images whose JSON already exists.
    Any error is logged to `failed_pages.txt`; processing continues.
    """
    input_root  = Path(input_root).expanduser().resolve()
    output_root = Path(output_root).expanduser().resolve()
    error_log   = Path(error_log).expanduser().resolve()

    output_root.mkdir(parents=True, exist_ok=True)

    prompt = Path(prompt_path).read_text(encoding="utf-8")
    schema = json.loads(Path(schema_path).read_text(encoding="utf-8"))

    img_paths = sorted(input_root.rglob("*.jpg"))
    if not img_paths:
        raise FileNotFoundError(f"No JPG images found under {input_root}")

    async def _log_error(img: Path, exc: Exception) -> None:
        error_log.parent.mkdir(parents=True, exist_ok=True)
        with error_log.open("a", encoding="utf-8") as fp:
            fp.write(
                f"[{datetime.now():%Y-%m-%d %H:%M:%S}] {img}\n"
                f"{type(exc).__name__}: {exc}\n"
                f"{traceback.format_exc()}\n{'-'*60}\n"
            )

    for img in img_paths:
        rel_path  = img.relative_to(input_root)
        json_path = (output_root / rel_path).with_suffix(".json")

        # ---- Skip if JSON already exists -----------------------------------
        if json_path.exists():
            print(f"⏭  Skipping {rel_path} (JSON already present)")
            continue

        try:
            with img.open("rb") as fh:
                files = [("images", (img.name, fh, _mime(img)))]
                response = await vision_structure(schema, prompt, files)

            json_path.parent.mkdir(parents=True, exist_ok=True)
            json_path.write_text(
                json.dumps(response, ensure_ascii=False, indent=2),
                encoding="utf-8"
            )
            print(f"✓ {rel_path}  →  {json_path.relative_to(output_root)}")

        except Exception as e:
            await _log_error(img, e)
            print(f"✗ Error on {rel_path}  (logged and continuing)")

    print("\nProcessing complete.")
    if error_log.exists():
        print(f"Any failures were logged to: {error_log}")


# ---------------------- Example run (Jupyter) -----------------------
# await vision_extract_mirror_tree()
