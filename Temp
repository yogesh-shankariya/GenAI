import re
from collections import OrderedDict

def extract_pages(text: str) -> dict:
    """
    Return an ordered dict that maps each page to the combined snippet(s)
    that cite it. Works whether the tag appears as
        “… Evidence: [Page 15]”
    or simply
        “… [Page 15]”
    Parameters
    ----------
    text : str
        Raw string containing one or more “… [Page N]” markers.

    Returns
    -------
    dict
        {"Page-<N>": "<concatenated snippet text>", ...}
    """
    pattern = re.compile(
        r"""
        (.*?)                  # (1) snippet – non-greedy
        \s*                    # optional whitespace
        (?:Evidence:\s*)?      # optional “Evidence:” label
        \[Page\s+(\d+)\]       # [Page N] – (2) captures N
        """,
        re.DOTALL | re.VERBOSE,
    )

    page_dict = OrderedDict()

    for snippet, page_num in pattern.findall(text):
        key = f"Page-{page_num}"
        snippet = " ".join(snippet.split())            # normalise spacing
        if key in page_dict:
            if snippet not in page_dict[key]:
                page_dict[key] += " " + snippet        # merge unique snippet
        else:
            page_dict[key] = snippet

    return page_dict
