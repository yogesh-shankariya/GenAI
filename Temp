from pathlib import Path
from collections import defaultdict
from typing import Union

def compare_json_hierarchies(input1: Union[str, Path],
                             input2: Union[str, Path],
                             verbose: bool = True) -> bool:
    """
    Cross-check that input1 and input2 contain the SAME set of JSON files
    in the SAME hierarchy (matched by relative path).

    Prints per-folder results and returns:
        True  -> trees match exactly
        False -> any mismatch (missing/extra files or different counts)
    """
    root1 = Path(input1).resolve()
    root2 = Path(input2).resolve()

    # Collect relative paths of every .json file
    files1 = {p.relative_to(root1) for p in root1.rglob("*.json") if p.is_file()}
    files2 = {p.relative_to(root2) for p in root2.rglob("*.json") if p.is_file()}

    # Helper: index by parent folder â†’ set of filenames
    def index_by_dir(rel_paths: set[Path]):
        idx = defaultdict(set)
        for rel in rel_paths:
            idx[rel.parent].add(rel.name)
        return idx

    idx1 = index_by_dir(files1)
    idx2 = index_by_dir(files2)

    ok = True
    all_dirs = sorted(set(idx1.keys()) | set(idx2.keys()), key=lambda p: p.as_posix())

    for d in all_dirs:
        names1 = idx1.get(d, set())
        names2 = idx2.get(d, set())

        if names1 == names2:
            if verbose:
                print(f"[OK] {d.as_posix() or '.'}: {len(names1)} file(s)")
        else:
            ok = False
            if verbose:
                print(f"[MISMATCH] {d.as_posix() or '.'}")
                missing = sorted(names1 - names2)
                extra   = sorted(names2 - names1)
                if missing:
                    print(f"  Missing in input2: {missing}")
                if extra:
                    print(f"  Extra in input2:   {extra}")
                print(f"  Count input1={len(names1)} | input2={len(names2)}")

    if verbose:
        print("\nSummary:")
        print(f"  input1 total: {len(files1)} JSON")
        print(f"  input2 total: {len(files2)} JSON")
        print(f"  MATCH: {ok}")

    return ok
