import json
from pathlib import Path
from typing import Union, List, Dict, Any

def build_master_combined(
    master_folder: Union[str, Path],
    output_filename: str = "combined_master.json",
    case_key: str = "folder",
    count_key: str = "true_page_count",
    pages_key: str = "true_pages",
    steps_key: str = "steps",
    final_step_name: str = "Final Decision",
    approve_token: str = "APPROVE"
) -> str:
    """
    Merge all subfolder-level `combined.json` files under `master_folder`
    into a single master JSON. For each subfolder we emit an object:

      {
        "<case_key>": <subfolder name>,
        "<count_key>": <# of unique pages with positive hits>,
        "<pages_key>": [list of page numbers with positive hits],
        "<steps_key>": <the original combined.json content as-is (list)>
      }

    Positive hit rules:
      - Normal steps: item['value'] is True
      - Final Decision: item['value'] equals approve_token (case-insensitive)

    Returns the path to the written master JSON.
    """
    root = Path(master_folder).resolve()
    out_path = root / output_filename
    final_key = final_step_name.strip().lower()
    approve_u = approve_token.upper()

    # find every combined.json one level or many levels below
    combined_files = sorted(root.rglob("combined.json"))

    master_payload: List[Dict[str, Any]] = []

    for cfile in combined_files:
        try:
            steps = json.loads(cfile.read_text(encoding="utf-8"))
        except Exception:
            # skip unreadable/bad JSON
            continue

        # collect unique pages with positive hits
        positive_pages = set()

        for step in steps if isinstance(steps, list) else []:
            name = (step.get("name") or "").strip().lower()
            is_final = name == final_key
            results = step.get("results", [])

            for item in results:
                val = item.get("value")
                page = item.get("page")

                # positive for normal steps
                if not is_final and val is True and isinstance(page, int):
                    positive_pages.add(page)

                # positive for Final Decision only if APPROVE
                if is_final and isinstance(val, str) and val.strip().upper() == approve_u and isinstance(page, int):
                    positive_pages.add(page)

        entry = {
            case_key: cfile.parent.name,                       # subfolder name
            count_key: len(positive_pages),
            pages_key: sorted(positive_pages),
            steps_key: steps                                    # your existing combined content, unchanged
        }
        master_payload.append(entry)

    # write master file
    out_path.write_text(json.dumps(master_payload, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"Wrote: {out_path}")
    return str(out_path)
