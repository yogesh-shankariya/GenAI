def inline_refs(model_cls) -> dict:
    """
    Recursively inline all $ref references in model_json_schema(), including
    string refs used in discriminator.mapping (e.g. '#/$defs/BoolStep').
    """
    schema = model_cls.model_json_schema()
    defs = schema.get("$defs", {})

    def resolve(obj):
        # 1) dict: inline {"$ref": "..."} and walk fields (dropping $defs)
        if isinstance(obj, dict):
            if "$ref" in obj:
                key = obj["$ref"].split("/")[-1]
                return resolve(defs.get(key, {}))
            return {k: resolve(v) for k, v in obj.items() if k != "$defs"}

        # 2) list: recurse
        if isinstance(obj, list):
            return [resolve(i) for i in obj]

        # 3) string: inline '#/$defs/...'
        if isinstance(obj, str) and obj.startswith("#/$defs/"):
            key = obj.split("/")[-1]
            return resolve(defs.get(key, {}))

        return obj

    inlined = resolve(schema)
    if isinstance(inlined, dict):
        inlined.pop("$defs", None)
        inlined.pop("definitions", None)  # safety for alt key
    return inlined
