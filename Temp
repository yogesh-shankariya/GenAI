import logging
from typing import List, Optional
from fastapi import APIRouter, BackgroundTasks
from pydantic import BaseModel
import requests

referral_router = APIRouter()
BASE_URL = "https://ingestion.synthesisuat.awsdns.internal.das/api/storage/download?filePath={}&isDecrypt=true"

# ------------------------------
# SCHEMA
# ------------------------------
class Chunk(BaseModel):
    loincd: Optional[str] = ""
    loincd_desc: Optional[str] = ""
    chunk_url: str

class ReferralRequest(BaseModel):
    trace_id: str
    file_name: Optional[str]
    file_path: Optional[str]
    file_type: Optional[str]
    chunks: List[Chunk]

class ReferralResponse(BaseModel):
    trace_id: str
    xml_content: str


# ------------------------------
# CORE FUNCTION
# ------------------------------
async def generate_combined_xml(trace_id: str, req: ReferralRequest) -> str:
    logger = logging.getLogger(__name__)
    logger.info(f"{trace_id} - Starting referral processing")

    combined_xml = ""
    for chunk in req.chunks:
        full_url = BASE_URL.format(chunk.chunk_url)
        try:
            response = requests.get(full_url, verify=False, timeout=15)
            if response.status_code == 200:
                combined_xml += response.text.strip() + "\n"
                logger.info(f"{trace_id} - Successfully fetched: {chunk.chunk_url}")
            else:
                logger.warning(f"{trace_id} - Failed: {chunk.chunk_url}, Status: {response.status_code}")
        except Exception as e:
            logger.error(f"{trace_id} - Exception fetching {chunk.chunk_url}: {str(e)}")

    return combined_xml


# ------------------------------
# ENDPOINT: Synchronous
# ------------------------------
@referral_router.post("/referral", response_model=ReferralResponse)
async def referral_response(req: ReferralRequest):
    combined_xml = await generate_combined_xml(req.trace_id, req)
    return ReferralResponse(trace_id=req.trace_id, xml_content=combined_xml)


# ------------------------------
# ENDPOINT: Background Task Variant (Optional)
# ------------------------------
@referral_router.post("/referral-bg")
async def referral_response_background(req: ReferralRequest, background_tasks: BackgroundTasks):
    background_tasks.add_task(generate_combined_xml, req.trace_id, req)
    return {"trace_id": req.trace_id, "msg": "Referral processing started in background"}
