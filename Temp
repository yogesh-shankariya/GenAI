import json
import os
import asyncio
from typing import Any, Dict

# ---------- initialise once, e.g. at module import --------------------------
STEP_LOG_PATH: str = "step_outputs.json"
step_outputs: Dict[str, Any] = {}
step_lock: asyncio.Lock = asyncio.Lock()

# ------------- utility to load existing data on startup ---------------------
def _load_existing_steps() -> None:
    global step_outputs
    if os.path.isfile(STEP_LOG_PATH):
        with open(STEP_LOG_PATH, "r", encoding="utf-8") as fh:
            try:
                step_outputs = json.load(fh)
            except json.JSONDecodeError:
                # corrupted file → start fresh
                step_outputs = {}

# call once at startup
_load_existing_steps()

# --------------------------------------------------------------------------- #
async def record_step_output(step_number: int, output: Any) -> None:
    """
    Store or update an entry in `step_outputs.json` with proper indentation.

    Example call:
        await record_step_output(1, {"status": 200, "data": "hello"})

    Result in file:
        {
          "step-1": {
            "status": 200,
            "data": "hello"
          },
          ...
        }
    """
    key = f"step-{step_number}"

    async with step_lock:                # guarantees async-safe writes
        step_outputs[key] = output       # update in-memory dict
        # write atomically
        tmp_path = STEP_LOG_PATH + ".tmp"
        with open(tmp_path, "w", encoding="utf-8") as fh:
            json.dump(step_outputs, fh, indent=2, ensure_ascii=False)
        os.replace(tmp_path, STEP_LOG_PATH)

def record_step_output_sync(step_number: int, output):
    """
    Thread-safe helper that works whether or not an event loop is running.
    """
    coro = record_step_output(step_number, output)
    try:
        loop = asyncio.get_running_loop()
    except RuntimeError:
        # no loop → safe to start one
        asyncio.run(coro)
    else:
        # loop already running → fire-and-forget task
        asyncio.create_task(coro)
