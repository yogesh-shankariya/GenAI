"""
Tally follow-up vs referral cues in a note.

Output shape
------------
{
  "Referral": {
      "total": 3,
      "regex_count": 2,
      "fuzzy_count": 1,
      "regex_patterns": ["\\breferral to\\b", "\\bconsult with\\b"],
      "fuzzy_phrases": ["referral to gi"]
  },
  "Folow up": {
      "total": 2,
      ...
  }
}
"""

import re
import yaml
from rapidfuzz import fuzz

RULE_FILE = "followup_referral_patterns.yaml"
FUZZY_THRESHOLD = 85                                   # similarity 0-100

with open(RULE_FILE, "r") as fh:
    RULES = yaml.safe_load(fh)


def _regex_hits(sentence: str, patterns: list[str]) -> list[str]:
    """Return every regex pattern that matches this sentence."""
    return [pat for pat in patterns if re.search(pat, sentence, flags=re.I)]


def _fuzzy_hits(sentence: str, phrases: list[str]) -> list[str]:
    """Return every phrase whose partial-ratio ≥ threshold."""
    s = sentence.lower()
    return [p for p in phrases if fuzz.partial_ratio(p, s) >= FUZZY_THRESHOLD]


def analyse_note(text: str) -> dict:
    # initialise running tallies
    summary = {
        "Referral": {
            "regex_count": 0, "fuzzy_count": 0,
            "regex_patterns": set(), "fuzzy_phrases": set()
        },
        "Folow up": {
            "regex_count": 0, "fuzzy_count": 0,
            "regex_patterns": set(), "fuzzy_phrases": set()
        },
    }

    # rough sentence split
    for sent in filter(None, map(str.strip, re.split(r"[.?!]\s+", text))):
        # ---------------- FOLLOW-UP -----------------
        for pat in _regex_hits(sent, RULES["followup"]["regex_patterns"]):
            summary["Folow up"]["regex_count"] += 1
            summary["Folow up"]["regex_patterns"].add(pat)

        for phr in _fuzzy_hits(sent, RULES["followup"]["fuzzy_phrases"]):
            summary["Folow up"]["fuzzy_count"] += 1
            summary["Folow up"]["fuzzy_phrases"].add(phr)

        # ---------------- REFERRAL ------------------
        for pat in _regex_hits(sent, RULES["referral"]["regex_patterns"]):
            summary["Referral"]["regex_count"] += 1
            summary["Referral"]["regex_patterns"].add(pat)

        for phr in _fuzzy_hits(sent, RULES["referral"]["fuzzy_phrases"]):
            summary["Referral"]["fuzzy_count"] += 1
            summary["Referral"]["fuzzy_phrases"].add(phr)

    # final tidy-up: cast sets → sorted lists, add total
    for cat in summary.values():
        cat["regex_patterns"] = sorted(cat["regex_patterns"])
        cat["fuzzy_phrases"] = sorted(cat["fuzzy_phrases"])
        cat["total"] = cat["regex_count"] + cat["fuzzy_count"]

    return summary


# quick smoke-test
if __name__ == "__main__":
    note = (
        "I will refer her to Dr Gearard for GI review. "
        "RTC prn. Follow-up with OB/GYN and then consider referral to GI."
    )
    import json, pprint
    pprint.pp(json.loads(json.dumps(analyse_note(note), indent=2)))
