# encode_qr.py
import base64, gzip, hashlib, io, json, math, pathlib, tarfile
import segno

def gzip_bytes(b: bytes) -> bytes:
    bio = io.BytesIO()
    with gzip.GzipFile(fileobj=bio, mode='wb') as gz:
        gz.write(b)
    return bio.getvalue()

def tar_gz_dir(dir_path: str) -> bytes:
    dir_path = pathlib.Path(dir_path)
    bio = io.BytesIO()
    with tarfile.open(fileobj=bio, mode='w:gz') as tar:
        # exclude common junk; edit as you like
        def _filter(ti: tarfile.TarInfo):
            bad = ('/.git/', '/__pycache__/', '/.venv/', '/.ipynb_checkpoints/')
            return None if any(x in f'/{ti.name}/' for x in bad) else ti
        tar.add(dir_path, arcname=dir_path.name, filter=_filter)
    return bio.getvalue()

def to_qr_bytes(raw: bytes, label: str, out_dir='qr_out', bytes_per_qr=1600, ec='Q', scale=8):
    gz = gzip_bytes(raw)                          # compress first (big win for code)
    sha = hashlib.sha256(gz).hexdigest()          # checksum of the compressed payload
    b64 = base64.b64encode(gz).decode('ascii')    # make it QR-friendly text
    chunks = [b64[i:i+bytes_per_qr] for i in range(0, len(b64), bytes_per_qr)]
    n = len(chunks)
    out = pathlib.Path(out_dir); out.mkdir(exist_ok=True)
    for i, ch in enumerate(chunks):
        payload = json.dumps(
            {"lbl": label, "i": i, "n": n, "sha256": sha, "b64": ch},
            separators=(',', ':')
        )
        qr = segno.make(payload, error=ec)
        qr.save(out / f'{label}_{i:04d}.png', scale=scale)
    print(f'Wrote {n} QR images to {out_dir}. sha256(compressed)={sha}')

if __name__ == "__main__":
    import argparse, os
    ap = argparse.ArgumentParser()
    ap.add_argument("path", help="file.py or folder (for whole repo)")
    ap.add_argument("--out", default="qr_out")
    ap.add_argument("--bytes_per_qr", type=int, default=1600)
    ap.add_argument("--ec", default="Q", choices=list("LMQH"))
    args = ap.parse_args()

    p = pathlib.Path(args.path)
    if p.is_dir():
        data = tar_gz_dir(str(p))
        label = p.name + ".tar.gz"
    else:
        data = p.read_bytes()
        label = p.name
    to_qr_bytes(data, label, args.out, args.bytes_per_qr, args.ec)
