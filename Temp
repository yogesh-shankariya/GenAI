import cv2, numpy as np
from PIL import Image
from ultralytics import YOLO

DETECTOR   = YOLO("checkbox_detector.pt")
CLASSIFIER = YOLO("checkbox_classifier.pt")

BOX_COLORS = {"unchecked": (242,  48,  48),
              "checked":   ( 38, 115, 101),
              "block":     (242, 159,   5)}
IDX2NAME   = {0: "block", 1: "checked", 2: "unchecked"}

def _to_rgb_numpy(img):
    """
    Accepts PIL.Image, torch.Tensor, NumPy BGR/RGB.
    Returns RGB NumPy array (H,W,3) uint8.
    """
    # --- PIL ------------------------------------------------------------
    if isinstance(img, Image.Image):
        img = np.array(img)              # now RGB uint8
    # --- torch tensor ----------------------------------------------------
    if "torch" in str(type(img)):
        img = img.detach().cpu().numpy()
        if img.ndim == 3 and img.shape[0] in (1,3):       # CHW
            img = np.moveaxis(img, 0, -1)                 # â†’ HWC
        img = (img * 255).clip(0,255).astype("uint8")
    # --- NumPy but greyscale --------------------------------------------
    if img.ndim == 2:                                     # (H,W)
        img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)
    # --- NumPy BGR -------------------------------------------------------
    if img.shape[-1] == 3 and img.dtype == np.uint8:
        # heuristically assume BGR if first channel > last channel avg
        if img[...,0].mean() > img[...,2].mean():
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    return img

def annotate_checkbox_page(page_path, out_path="out.jpg", show=True):
    page_bgr = cv2.imread(page_path)                      # BGR
    det_res  = DETECTOR(page_bgr, imgsz=1280, conf=0.2)[0]

    for (x1,y1,x2,y2) in det_res.boxes.xyxy.cpu().numpy():
        x1,y1,x2,y2 = map(int,(x1,y1,x2,y2))
        if x2<=x1 or y2<=y1:                # empty crop guard
            continue

        crop = page_bgr[y1:y2, x1:x2].copy()             # BGR
        crop_rgb = _to_rgb_numpy(crop)

        try:                                             # normal path
            cls_out = CLASSIFIER.predict(crop_rgb, imgsz=64,
                                          verbose=False)[0]
        except AttributeError:
            # fallback: save crop to temp file, give path to YOLO
            import tempfile, os
            with tempfile.NamedTemporaryFile(suffix=".jpg",
                                             delete=False) as tmp:
                cv2.imwrite(tmp.name, cv2.cvtColor(crop_rgb,
                                                   cv2.COLOR_RGB2BGR))
                cls_out = CLASSIFIER(tmp.name, imgsz=64)[0]
            os.unlink(tmp.name)

        idx   = int(cls_out.probs.top1)       # 0/1/2
        conf  = float(cls_out.probs.top1conf)
        label = IDX2NAME[idx]
        color = BOX_COLORS[label]

        cv2.rectangle(page_bgr,(x1,y1),(x2,y2),color,2)
        txt = f"{label} {conf:.2f}"
        (tw,th),_ = cv2.getTextSize(txt,cv2.FONT_HERSHEY_SIMPLEX,0.5,1)
        cv2.rectangle(page_bgr,(x1,y1-th-6),(x1+tw+4,y1),color,-1)
        cv2.putText(page_bgr,txt,(x1+2,y1-4),
                    cv2.FONT_HERSHEY_SIMPLEX,0.5,(255,255,255),1)

    cv2.imwrite(out_path,page_bgr)
    if show:
        import matplotlib.pyplot as plt
        plt.figure(figsize=(8,10))
        plt.imshow(cv2.cvtColor(page_bgr,cv2.COLOR_BGR2RGB))
        plt.axis("off")
        plt.title(f"checkboxes = {len(det_res.boxes)}")
        plt.show()

# ------------- run once --------------------------------------------------
annotate_checkbox_page("sample.jpg","sample_annotated.jpg")
