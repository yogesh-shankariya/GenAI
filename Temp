import json
import os
from typing import Any, Dict, Iterable

def extract_extraction_instructions(input_json_path: str, output_json_path: str) -> Dict[str, str]:
    """
    Read the input JSON, find all extraction instructions under sections â†’ data_points,
    and save them to a single JSON with numbered keys.
    Returns the dict that was written.
    """
    if not os.path.isfile(input_json_path):
        raise FileNotFoundError(f"Input file not found: {input_json_path}")

    with open(input_json_path, "r", encoding="utf-8") as f:
        data = json.load(f)

    def iter_data_points(node: Any) -> Iterable[Dict[str, Any]]:
        # Yield all dicts that are data-points/data_points anywhere under sections
        if isinstance(node, dict):
            # typical key
            if isinstance(node.get("data_points"), list):
                for dp in node["data_points"]:
                    if isinstance(dp, dict):
                        yield dp
            # hyphen variant (just in case)
            if isinstance(node.get("data-points"), list):
                for dp in node["data-points"]:
                    if isinstance(dp, dict):
                        yield dp
            # dive into possible section containers
            secs = node.get("sections")
            if isinstance(secs, list):
                for s in secs:
                    yield from iter_data_points(s)
            # generic dive to be safe
            for v in node.values():
                if isinstance(v, (dict, list)):
                    yield from iter_data_points(v)

        elif isinstance(node, list):
            for item in node:
                yield from iter_data_points(item)

    out: Dict[str, str] = {}
    idx = 1

    for dp in iter_data_points(data):
        instr = (
            dp.get("extraction_instructions")
            if dp.get("extraction_instructions") is not None
            else dp.get("extraction_instruction")
        )
        if instr is None:
            continue

        # normalize to a single string
        if isinstance(instr, str):
            value = instr.strip()
        elif isinstance(instr, list):
            parts = []
            for x in instr:
                parts.append(x if isinstance(x, str) else json.dumps(x, ensure_ascii=False))
            value = "\n".join(p.strip() for p in parts if p and p.strip())
        else:
            value = json.dumps(instr, ensure_ascii=False)

        if value:
            out[f"extraction_instruction_{idx}"] = value
            idx += 1

    os.makedirs(os.path.dirname(output_json_path) or ".", exist_ok=True)
    with open(output_json_path, "w", encoding="utf-8") as f:
        json.dump(out, f, indent=2, ensure_ascii=False)

    return out
