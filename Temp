import json
from pathlib import Path
from typing import Union, List, Dict, Any

def build_master_combined_simple(
    master_folder: Union[str, Path],
    output_dir: Union[str, Path] = "combine-output-master",
    output_filename: str = "combined_master.json",
    case_key: str = "folder",
    steps_key: str = "steps",
    strip_page_field: bool = True
) -> str:
    """
    For every subfolder under `master_folder` that contains `combined.json`,
    produce a master file at:
        combine-output-master/<MASTER_FOLDER_NAME>/combined_master.json

    Output format (no aggregation):
      [
        {
          "folder": "<subfolder name>",
          "steps": <content of that subfolder's combined.json (with 'page' removed if strip_page_field)>
        },
        ...
      ]
    """
    root = Path(master_folder).resolve()
    out_root = Path(output_dir).resolve() / root.name
    out_root.mkdir(parents=True, exist_ok=True)
    out_path = out_root / output_filename

    entries: List[Dict[str, Any]] = []

    for cfile in sorted(root.rglob("combined.json")):
        try:
            steps = json.loads(cfile.read_text(encoding="utf-8"))
        except Exception:
            continue

        if strip_page_field and isinstance(steps, list):
            for step in steps:
                results = step.get("results", [])
                if isinstance(results, list):
                    for item in results:
                        if isinstance(item, dict):
                            item.pop("page", None)  # remove page number

        entries.append({
            case_key: cfile.parent.name,
            steps_key: steps
        })

    out_path.write_text(json.dumps(entries, ensure_ascii=False, indent=2), encoding="utf-8")
    print(f"Wrote: {out_path}")
    return str(out_path)
