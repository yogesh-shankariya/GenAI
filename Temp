def safe_load_json(
        self,
        txt: str,
        *,                  # allows keyword-only extras
        context: str = ""   # pass the question or any label here
) -> dict:
    """
    Strict JSON loader.
    • On success → dict
    • On failure → log the context + raw text and raise again
    """
    try:
        return json.loads(txt)

    except json.JSONDecodeError as e:
        # 1. log to console / file
        self.logger.error(
            "JSONDecodeError in %s : %s", context or "<no-context>", str(e)
        )

        # 2. append the bad payload to a forensic file
        with open("invalid_json_payloads.txt", "a", encoding="utf-8") as fh:
            fh.write(
                f"\n--- {datetime.now():%Y-%m-%d %H:%M:%S} ---\n"
                f"context : {context or '<no-context>'}\n"
                f"raw     :\n{txt}\n"
            )

        # 3. re-raise so the caller can decide what to do
        raise
