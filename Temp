import importlib.util
import inspect
from pathlib import Path
from pydantic import BaseModel


    # ----------------------------------------------------------------- #
    #  Name-based loader (class always supplied in config)              #
    # ----------------------------------------------------------------- #
    def load_structure_schema(self, schema_name: str) -> dict:
        """
        Load and return the fully-inlined JSON schema for the Pydantic
        model identified by *schema_name*.

        Expectations
        ------------
        In ``config.yml`` each entry under ``pydantic_schemas`` **must** be
        a mapping of the form:

            pydantic_schemas:
              base_path: "src/schemas"
              some_key:
                file:  "some_model.py"
                class: "SomeModelPayload"

        Returns
        -------
        dict
            Expanded JSON schema (all ``$ref`` nodes resolved).

        Raises
        ------
        KeyError
            If *schema_name* is missing or required keys are absent.
        FileNotFoundError
            If the specified ``file`` does not exist.
        ValueError
            If the requested class is not a subclass of ``pydantic.BaseModel``.
        """
        # -------- resolve entry & sanity-check config -----------------
        try:
            entry = self.config["pydantic_schemas"][schema_name]
            base_dir = Path(self.config["pydantic_schemas"]["base_path"])
            file_path = entry["file"]
            class_name = entry["class"]
        except KeyError as e:
            raise KeyError(
                f"Configuration for '{schema_name}' must include "
                "'file' and 'class' keys"
            ) from e

        schema_path = base_dir / file_path
        if not schema_path.exists():
            raise FileNotFoundError(f"Pydantic schema file not found: {schema_path}")

        # -------- dynamic import of the module ------------------------
        spec = importlib.util.spec_from_file_location(schema_name, schema_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)                                # type: ignore

        # -------- fetch & validate the requested model ---------------
        model_cls = getattr(module, class_name, None)
        if not (inspect.isclass(model_cls) and issubclass(model_cls, BaseModel)):
            raise ValueError(
                f"'{class_name}' in '{schema_path.name}' is not a Pydantic BaseModel"
            )

        # -------- build + inline JSON schema --------------------------
        raw_schema = model_cls.model_json_schema(                       # type: ignore
            ref_template="#/$defs/{model}"
        )
        return self.inline_refs(raw_schema)
