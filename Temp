import cv2, tempfile, os, numpy as np, matplotlib.pyplot as plt
from ultralytics import YOLO

# --------------------------------------------------  weights
DETECTOR_WT   = "checkbox_detector.pt"
CLASSIFIER_WT = "checkbox_classifier.pt"

DETECTOR   = YOLO(DETECTOR_WT)        # bbox model
CLASSIFIER = YOLO(CLASSIFIER_WT)      # 0 block • 1 checked • 2 unchecked

BOX_COLORS = {
    "unchecked": (242,  48,  48),
    "checked":   ( 38, 115, 101),
    "block":     (242, 159,   5)
}
IDX2NAME = {0: "block", 1: "checked", 2: "unchecked"}

# --------------------------------------------------  helper
def classify_crop_via_tempfile(crop_bgr: np.ndarray):
    "Save crop→disk → hand path to classifier → clean up → return idx, conf"
    fd, tmp_path = tempfile.mkstemp(suffix=".jpg")
    os.close(fd)                                        # close file handle
    cv2.imwrite(tmp_path, crop_bgr)                     # write BGR → jpg
    out      = CLASSIFIER(tmp_path, imgsz=64, verbose=False)[0]
    idx      = int(out.probs.top1)                      # 0 / 1 / 2
    conf     = float(out.probs.top1conf)
    os.remove(tmp_path)                                 # tidy
    return idx, conf

# --------------------------------------------------  main visualiser
def annotate_page(img_path: str,
                  out_path: str = "annotated.jpg",
                  show_inline: bool = True):
    page_bgr = cv2.imread(img_path)
    det      = DETECTOR(page_bgr, imgsz=1280, conf=0.2)[0]

    for (x1, y1, x2, y2) in det.boxes.xyxy.cpu().numpy():
        x1, y1, x2, y2 = map(int, (x1, y1, x2, y2))
        if x2 <= x1 or y2 <= y1:           # skip degenerate boxes
            continue

        crop = page_bgr[y1:y2, x1:x2].copy()
        idx, conf = classify_crop_via_tempfile(crop)

        label  = IDX2NAME[idx]            # checked / unchecked / block
        color  = BOX_COLORS[label]
        text   = f"{label} {conf:.2f}"

        # draw rectangle
        cv2.rectangle(page_bgr, (x1, y1), (x2, y2), color, 2)

        # draw filled label-bg
        (tw, th), _ = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX,
                                      0.5, 1)
        cv2.rectangle(page_bgr,
                      (x1, y1 - th - 6),
                      (x1 + tw + 4, y1),
                      color, -1)
        cv2.putText(page_bgr, text,
                    (x1 + 2, y1 - 4),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    0.5, (255, 255, 255), 1)

    cv2.imwrite(out_path, page_bgr)

    if show_inline:
        plt.figure(figsize=(8, 10))
        plt.imshow(cv2.cvtColor(page_bgr, cv2.COLOR_BGR2RGB))
        plt.axis("off")
        plt.title(f"Checkbox states  •  total boxes = {len(det.boxes)}")
        plt.show()

# --------------------------------------------------  run
annotate_page("sample.jpg", "sample_annotated.jpg")
