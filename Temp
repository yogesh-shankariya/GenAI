from pathlib import Path
from collections import defaultdict
from typing import Union

def _index_stems_by_dir(root: Path, pattern: str):
    """
    Return: dict[relative_dir -> set of file stems]
    Example stem: 'page-1' for 'page-1.json' or 'page-1.txt'
    """
    idx = defaultdict(set)
    for p in root.rglob(pattern):
        if p.is_file():
            rel = p.relative_to(root)
            idx[rel.parent].add(p.stem)   # stem = filename without extension
    return idx

def compare_json_vs_txt(json_root: Union[str, Path],
                        txt_root: Union[str, Path],
                        verbose: bool = True) -> bool:
    """
    Cross-check that every folder under `json_root` and `txt_root`
    contains the same page stems (e.g., page-1, page-2, ...) regardless of extension.

    Returns True if all folders match exactly, else False.
    Prints per-folder details.
    """
    jroot = Path(json_root).resolve()
    troot = Path(txt_root).resolve()

    j_idx = _index_stems_by_dir(jroot, "*.json")
    t_idx = _index_stems_by_dir(troot, "*.txt")

    ok = True
    all_dirs = sorted(set(j_idx.keys()) | set(t_idx.keys()), key=lambda p: p.as_posix())

    for d in all_dirs:
        j_stems = j_idx.get(d, set())
        t_stems = t_idx.get(d, set())

        if j_stems == t_stems:
            if verbose:
                print(f"[OK] {d.as_posix() or '.'}: {len(j_stems)} files match")
            continue

        ok = False
        if verbose:
            print(f"[MISMATCH] {d.as_posix() or '.'}")
            missing_txt  = sorted(j_stems - t_stems)  # expected in .txt but not found
            extra_txt    = sorted(t_stems - j_stems)  # present in .txt but not in .json
            if missing_txt:
                print(f"  Missing in TXT: {missing_txt}")
            if extra_txt:
                print(f"  Extra in TXT:   {extra_txt}")
            print(f"  Counts â†’ json:{len(j_stems)} txt:{len(t_stems)}")

    if verbose:
        total_json = sum(len(v) for v in j_idx.values())
        total_txt  = sum(len(v) for v in t_idx.values())
        print("\nSummary:")
        print(f"  Total json pages: {total_json}")
        print(f"  Total txt  pages: {total_txt}")
        print(f"  MATCH: {ok}")

    return ok
