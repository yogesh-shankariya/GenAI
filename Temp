from typing import List, Annotated
from pydantic import BaseModel, Field, field_validator

# ---------- Base provider schema ----------
class EncounterProvider(BaseModel):
    provider_role: str = Field(...)
    evidence_for_provider_role: str = Field(...)

    provider_name: str = Field(...)
    evidence_for_provider_name: str = Field(...)

    provider_speciality: str = Field(...)
    evidence_for_provider_speciality: str = Field(...)

    provider_npi: str = Field(...)
    evidence_for_provider_npi: str = Field(...)

    provider_health_organization: str = Field(...)
    evidence_for_provider_health_organization: str = Field(...)

    @field_validator("*", mode="before")
    @classmethod
    def _decode_bytes(cls, v):
        if isinstance(v, (bytes, bytearray)):
            return v.decode()
        return v

    model_config = {"extra": "forbid"}


# ---------- Wrapper to keep the "encounter_provider" key ----------
class EncounterProviderItem(BaseModel):
    encounter_provider: EncounterProvider
    model_config = {"extra": "forbid"}


# ---------- Final payload enforcing EXACTLY two items ----------
class EncounterProvidersPayload(BaseModel):
    encounter_providers: Annotated[
        List[EncounterProviderItem],
        Field(
            ...,
            min_length=2,
            max_length=2,
            description='Exactly two items: [{"encounter_provider": {...}}, {"encounter_provider": {...}}]'
        )
    ]

    model_config = {"extra": "forbid"}
