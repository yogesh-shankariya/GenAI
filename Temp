from pathlib import Path
from typing import Dict, List

# ---------------------------------------------------------------------------
# Assume your enhanced `pdf_to_jpgs` is already imported or defined above.
# from my_module import pdf_to_jpgs
# ---------------------------------------------------------------------------

def nested_batch_pdf_to_jpgs(
    input_root: str | Path = "Input_Files/HELIX",
    output_root: str | Path = "Output_Files/HELIX",
    dpi: int = 300,
    prefix: str = "page",
    **pdf_kwargs
) -> Dict[Path, List[Path]]:
    """
    Convert every PDF under `input_root` and reproduce this folder layout:

        Input_Files/HELIX/Reauth_01/<file_A>.pdf
                                        <file_B>.pdf
                          /Reauth_02/<file_C>.pdf
                          ...

        ─────────────────────────── becomes ───────────────────────────

        Output_Files/HELIX/Reauth_01/<file_A>/page-1.jpg  page-2.jpg ...
                                        <file_B>/page-1.jpg  ...
                          /Reauth_02/<file_C>/page-1.jpg  ...

    Parameters
    ----------
    input_root : str | Path
        Top-level folder with Reauth_* sub-folders containing PDFs.
    output_root : str | Path
        All images will be written here, preserving the same hierarchy.
    dpi, prefix
        Passed unchanged to `pdf_to_jpgs`.
    **pdf_kwargs
        Extra keyword arguments accepted by your `pdf_to_jpgs`
        (e.g., max_side, jpeg_quality).

    Returns
    -------
    Dict[Path, List[Path]]
        Mapping { pdf_path : [ list_of_generated_image_paths ] }.
    """
    input_root  = Path(input_root).expanduser().resolve()
    output_root = Path(output_root).expanduser().resolve()

    results: Dict[Path, List[Path]] = {}

    for pdf_path in input_root.rglob("*.pdf"):
        # Example: pdf_path = Input_Files/HELIX/Reauth_01/my_report.pdf
        reauth_subdir: Path = pdf_path.parent.relative_to(input_root)  # Reauth_01
        pdf_folder: Path    = Path(pdf_path.stem)                     # my_report
        out_dir: Path       = output_root / reauth_subdir / pdf_folder

        images = pdf_to_jpgs(
            pdf_path=pdf_path,
            output_dir=out_dir,
            dpi=dpi,
            prefix=prefix,
            **pdf_kwargs,
        )

        results[pdf_path] = images
        print(f"✓ {pdf_path.name:<50} -> {len(images):>3} pages in {out_dir}")

    if not results:
        print(f"No PDFs found under {input_root}")

    return results


# ── Example call ───────────────────────────────────────────────────────────
# nested_batch_pdf_to_jpgs()                    # uses default 300 dpi, prefix 'page'
# nested_batch_pdf_to_jpgs(dpi=300, max_side=2048)  # pass any extra args accepted by pdf_to_jpgs

