To measure the time taken to execute a function in Python, you can use the `time` module. Here's how to do it:

### Method 1: Using `time.time()`

```python
import time

start_time = time.time()
your_function()  # Replace with your actual function call
end_time = time.time()

execution_time = end_time - start_time
print(f"Execution time: {execution_time:.4f} seconds")
```

### Method 2: Using `time.perf_counter()` (more precise)

```python
import time

start = time.perf_counter()
your_function()
end = time.perf_counter()

print(f"Execution time: {end - start:.4f} seconds")
```

### Method 3: Using a decorator for reusability

```python
import time

def measure_time(func):
    def wrapper(*args, **kwargs):
        start = time.perf_counter()
        result = func(*args, **kwargs)
        end = time.perf_counter()
        print(f"{func.__name__} executed in {end - start:.4f} seconds")
        return result
    return wrapper

@measure_time
def your_function():
    # Your code here
    pass

your_function()
```

Let me know if you want to log it or store it somewhere instead of printing.
