import pandas as pd
from typing import Any, Dict, List

def _flatten(d: Dict[str, Any], parent_key: str = "", sep: str = ".") -> Dict[str, Any]:
    """Convert nested JSON into a flat dict like {'address.city': 'NYC'}."""
    items: List[tuple] = []
    for k, v in d.items():
        new_key = f"{parent_key}{sep}{k}" if parent_key else k
        if isinstance(v, dict):
            items.extend(_flatten(v, new_key, sep=sep).items())
        else:
            items.append((new_key, v))
    return dict(items)

def compare_json_df(json1: Dict[str, Any], json2: Dict[str, Any]) -> pd.DataFrame:
    """Return a DataFrame with columns:
       json1_key | json2_key | key_match | json1_value | json2_value | value_match
    """
    f1 = _flatten(json1)
    f2 = _flatten(json2)
    rows = []
    for key in sorted(set(f1) | set(f2)):     # order of keys doesnâ€™t matter
        rows.append(
            {
                "json1_key": key if key in f1 else None,
                "json2_key": key if key in f2 else None,
                "key_match": key in f1 and key in f2,
                "json1_value": f1.get(key),
                "json2_value": f2.get(key),
                "value_match": (f1.get(key) == f2.get(key)) if key in f1 and key in f2 else False,
            }
        )
    return pd.DataFrame(rows)
