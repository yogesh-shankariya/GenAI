from pathlib import Path
from typing import List
from pdf2image import convert_from_path
from PIL.Image import Image as PilImage  # for type hints

def pdf_to_jpgs(
    pdf_path: str | Path,
    output_dir: str | Path,
    dpi: int = 300,
    prefix: str = "page",
    max_side: int | None = 2048,
    jpeg_quality: int = 85,
) -> List[Path]:
    """
    Convert every page of a PDF to a separate JPG image.

    Parameters
    ----------
    pdf_path : str | Path
        Path to the source PDF.
    output_dir : str | Path
        Directory where JPGs will be saved (created if absent).
    dpi : int, default 300
        Resolution used when rasterising the PDF.
    prefix : str, default "page"
        Filename prefix for each image (e.g., 'page' -> page-1.jpg).
    max_side : int | None, default 2048
        If given, down‑scale so the longer dimension ≤ max_side pixels.
        Set to None to keep the original 300‑dpi size.
    jpeg_quality : int, default 85
        JPEG compression quality (1–95). 85 is a good balance.

    Returns
    -------
    List[Path]
        Paths to the generated JPG files.
    """
    pdf_path   = Path(pdf_path).expanduser().resolve()
    output_dir = Path(output_dir).expanduser().resolve()
    output_dir.mkdir(parents=True, exist_ok=True)

    # Rasterise PDF -> list[ PIL.Image ]
    pil_pages: list[PilImage] = convert_from_path(pdf_path, dpi=dpi)

    output_paths: List[Path] = []
    for idx, page in enumerate(pil_pages, start=1):
        if max_side:
            page.thumbnail((max_side, max_side))   # in‑place down‑scale

        img_path = output_dir / f"{prefix}-{idx}.jpg"
        page.save(img_path, "JPEG", quality=jpeg_quality)
        output_paths.append(img_path)

    return output_paths
