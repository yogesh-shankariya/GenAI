import re
import numpy as np
import openai
from sklearn.metrics.pairwise import cosine_similarity

openai.api_key = "your_openai_api_key_here"

# Function to get embeddings from OpenAI
def get_embedding(text):
    response = openai.Embedding.create(
        input=text,
        model="text-embedding-3-large"
    )
    return np.array(response['data'][0]['embedding'])

# Define your concepts clearly
labels = {
    "follow-up": "Patient should return or revisit the clinic for further evaluation or treatment.",
    "referral": "Patient referred or consultation requested with a specialist or another department."
}

# Embed concepts (labels)
label_embeddings = {label: get_embedding(text) for label, text in labels.items()}

# Example clinical note
note = "Patient advised RTC prn. Referral to GI if pain persists."

# Split note into sentences
sentences = re.split(r"[.?!]\s+", note.strip())

# Set similarity threshold (adjustable)
threshold = 0.80  # Adjust threshold based on validation results

# Analyze each sentence
for sentence in sentences:
    if sentence:  # Check sentence is not empty
        sent_emb = get_embedding(sentence)
        for label, label_emb in label_embeddings.items():
            sim_score = cosine_similarity(
                [sent_emb],
                [label_emb]
            )[0][0]

            if sim_score >= threshold:
                print(f"{label.upper()}: '{sentence}' (score: {sim_score:.2f})")
