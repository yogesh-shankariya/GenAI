from typing import List, Literal
from pydantic import BaseModel, Field


class BooleanStep(BaseModel):
    name: str = Field(..., description="Step name")
    value: bool = Field(..., description="Decision value for this step: true or false")
    evidence: List[str] = Field(..., description="Evidence snippets from actual page text")
    reason: str = Field(..., description="Reasoning behind the decision")

class FinalDecisionStep(BaseModel):
    name: str = Field(..., description="Final decision step name")
    value: Literal["APPROVE", "DENY"] = Field(..., description="Final decision value")
    evidence: List[str] = Field(..., description="Evidence snippets from actual page text")
    reason: str = Field(..., description="Reasoning behind the final decision")

class SkilledNursingAssessment(BaseModel):
    need_for_skilled_nursing_care: BooleanStep
    meets_medicare_intermit_defn: BooleanStep
    observation_and_assessment_need: BooleanStep
    teaching_and_training_need: BooleanStep
    medication_admin_need: BooleanStep
    catheter_care_need: BooleanStep
    wound_care_need: BooleanStep
    ostomy_care_need: BooleanStep
    final_decision: FinalDecisionStep

    model_config = {
        "extra": "forbid"
    }
