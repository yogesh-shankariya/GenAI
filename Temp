from pathlib import Path
from typing import Dict


def count_json_per_pdf(
    output_root: str | Path = "Output_Files/HELIX",
    summary_txt: str | Path = "json_page_counts.txt"
) -> Dict[Path, int]:
    """
    Walk an output hierarchy like
        Output_Files/HELIX/Reauth_01/<PDF_A>/page-1.json ...
                                  /<PDF_B>/page-1.json ...
    and count how many *.json files each <PDF_X> folder holds.

    Parameters
    ----------
    output_root : str | Path
        Top-level folder created by `nested_batch_pdf_to_jpgs`.
    summary_txt : str | Path
        Path to the text file where the report will be saved.

    Returns
    -------
    Dict[Path, int]
        { pdf_folder_path : json_file_count }.
    """
    output_root = Path(output_root).expanduser().resolve()
    summary_txt = Path(summary_txt).expanduser().resolve()

    if not output_root.exists():
        raise FileNotFoundError(output_root)

    pdf_counts: Dict[Path, int] = {}

    # Pattern: every directory that contains at least one .json page file
    for pdf_dir in [p for p in output_root.rglob("*") if p.is_dir()]:
        json_files = list(pdf_dir.glob("*.json"))
        if json_files:
            pdf_counts[pdf_dir] = len(json_files)

    # Write report
    with summary_txt.open("w", encoding="utf-8") as fp:
        for pdf_dir, n in sorted(pdf_counts.items()):
            line = f"{pdf_dir.relative_to(output_root)} -> {n}"
            print(line)
            fp.write(line + "\n")

    print(f"\nReport saved to {summary_txt}")
    return pdf_counts


# ── example run ───────────────────────────────────────────────────────────
# counts = count_json_per_pdf("Output_Files/HELIX", "json_page_counts.txt")
# The console will show lines like:
#   Reauth_01/Plan_of_Care_485_for_1st ... -> 2
#   Reauth_01/PT_Initial_Eval_Visit_Note    -> 2
# and the same lines will be stored in json_page_counts.txt
