import streamlit as st
import sqlite3
import json
import uuid
from datetime import datetime
from typing import List, Dict, Optional, Tuple
import os
from dotenv import load_dotenv
import openai
from pathlib import Path
import hashlib

# Load environment variables
load_dotenv()

# Database Manager Class
class DatabaseManager:
    """Handles all database operations for conversation storage"""
    
    def __init__(self, db_path: str = "conversations.db"):
        self.db_path = db_path
        self.init_database()
    
    def init_database(self):
        """Initialize the database with required tables"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # Create conversations table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS conversations (
                    session_id TEXT PRIMARY KEY,
                    title TEXT NOT NULL,
                    model TEXT NOT NULL,
                    system_message TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # Create messages table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS messages (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    session_id TEXT NOT NULL,
                    role TEXT NOT NULL,
                    content TEXT NOT NULL,
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (session_id) REFERENCES conversations(session_id) ON DELETE CASCADE
                )
            """)
            
            # Create files table
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS uploaded_files (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    session_id TEXT NOT NULL,
                    filename TEXT NOT NULL,
                    content TEXT NOT NULL,
                    file_hash TEXT NOT NULL,
                    uploaded_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (session_id) REFERENCES conversations(session_id) ON DELETE CASCADE
                )
            """)
            
            conn.commit()
    
    def create_conversation(self, title: str, model: str) -> str:
        """Create a new conversation and return its session_id"""
        session_id = str(uuid.uuid4())
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO conversations (session_id, title, model)
                VALUES (?, ?, ?)
            """, (session_id, title, model))
            conn.commit()
        return session_id
    
    def get_all_conversations(self) -> List[Dict]:
        """Retrieve all conversations"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT session_id, title, model, system_message, created_at, updated_at
                FROM conversations
                ORDER BY updated_at DESC
            """)
            conversations = []
            for row in cursor.fetchall():
                conversations.append({
                    'session_id': row[0],
                    'title': row[1],
                    'model': row[2],
                    'system_message': row[3],
                    'created_at': row[4],
                    'updated_at': row[5]
                })
            return conversations
    
    def update_conversation_title(self, session_id: str, new_title: str):
        """Update conversation title"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE conversations
                SET title = ?, updated_at = CURRENT_TIMESTAMP
                WHERE session_id = ?
            """, (new_title, session_id))
            conn.commit()
    
    def update_system_message(self, session_id: str, system_message: str):
        """Update system message for a conversation"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE conversations
                SET system_message = ?, updated_at = CURRENT_TIMESTAMP
                WHERE session_id = ?
            """, (system_message, session_id))
            conn.commit()
    
    def update_model(self, session_id: str, model: str):
        """Update model for a conversation"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE conversations
                SET model = ?, updated_at = CURRENT_TIMESTAMP
                WHERE session_id = ?
            """, (model, session_id))
            conn.commit()
    
    def delete_conversation(self, session_id: str):
        """Delete a conversation and all associated data"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM messages WHERE session_id = ?", (session_id,))
            cursor.execute("DELETE FROM uploaded_files WHERE session_id = ?", (session_id,))
            cursor.execute("DELETE FROM conversations WHERE session_id = ?", (session_id,))
            conn.commit()
    
    def add_message(self, session_id: str, role: str, content: str):
        """Add a message to a conversation"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO messages (session_id, role, content)
                VALUES (?, ?, ?)
            """, (session_id, role, content))
            cursor.execute("""
                UPDATE conversations
                SET updated_at = CURRENT_TIMESTAMP
                WHERE session_id = ?
            """, (session_id,))
            conn.commit()
    
    def get_messages(self, session_id: str) -> List[Dict]:
        """Get all messages for a conversation"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT role, content, timestamp
                FROM messages
                WHERE session_id = ?
                ORDER BY timestamp ASC
            """, (session_id,))
            messages = []
            for row in cursor.fetchall():
                messages.append({
                    'role': row[0],
                    'content': row[1],
                    'timestamp': row[2]
                })
            return messages
    
    def add_file(self, session_id: str, filename: str, content: str) -> str:
        """Add an uploaded file to a conversation"""
        file_hash = hashlib.md5(content.encode()).hexdigest()
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            # Check if file already exists
            cursor.execute("""
                SELECT id FROM uploaded_files
                WHERE session_id = ? AND file_hash = ?
            """, (session_id, file_hash))
            if cursor.fetchone():
                return "File already uploaded"
            
            cursor.execute("""
                INSERT INTO uploaded_files (session_id, filename, content, file_hash)
                VALUES (?, ?, ?, ?)
            """, (session_id, filename, content, file_hash))
            conn.commit()
            return "File uploaded successfully"
    
    def get_files(self, session_id: str) -> List[Dict]:
        """Get all files for a conversation"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, filename, content, uploaded_at
                FROM uploaded_files
                WHERE session_id = ?
                ORDER BY uploaded_at DESC
            """, (session_id,))
            files = []
            for row in cursor.fetchall():
                files.append({
                    'id': row[0],
                    'filename': row[1],
                    'content': row[2],
                    'uploaded_at': row[3]
                })
            return files
    
    def delete_file(self, file_id: int):
        """Delete a specific file"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM uploaded_files WHERE id = ?", (file_id,))
            conn.commit()
    
    def get_conversation_details(self, session_id: str) -> Optional[Dict]:
        """Get details of a specific conversation"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT session_id, title, model, system_message, created_at, updated_at
                FROM conversations
                WHERE session_id = ?
            """, (session_id,))
            row = cursor.fetchone()
            if row:
                return {
                    'session_id': row[0],
                    'title': row[1],
                    'model': row[2],
                    'system_message': row[3],
                    'created_at': row[4],
                    'updated_at': row[5]
                }
            return None


# OpenAI Chat Manager Class
class ChatManager:
    """Handles OpenAI API interactions"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        openai.api_key = api_key
    
    def get_model_mapping(self) -> Dict[str, str]:
        """Map display names to actual OpenAI model names"""
        return {
            "GPT-4.0": "gpt-4",
            "GPT-03": "gpt-3.5-turbo",
            "GPT-4.1": "gpt-4-turbo"
        }
    
    def prepare_messages(self, system_message: str, conversation_history: List[Dict], 
                        file_contents: List[str]) -> List[Dict]:
        """Prepare messages for OpenAI API"""
        messages = []
        
        # Combine system message with file contents
        combined_system_message = system_message or ""
        if file_contents:
            file_context = "\n\n--- Uploaded Files Content ---\n" + "\n---\n".join(file_contents)
            combined_system_message += file_context
        
        if combined_system_message:
            messages.append({"role": "system", "content": combined_system_message})
        
        # Add conversation history
        for msg in conversation_history:
            messages.append({"role": msg["role"], "content": msg["content"]})
        
        return messages
    
    def get_response(self, model: str, messages: List[Dict]) -> str:
        """Get response from OpenAI API"""
        try:
            model_mapping = self.get_model_mapping()
            actual_model = model_mapping.get(model, "gpt-3.5-turbo")
            
            response = openai.ChatCompletion.create(
                model=actual_model,
                messages=messages,
                temperature=0.7,
                max_tokens=2000
            )
            return response.choices[0].message.content
        except Exception as e:
            return f"Error: {str(e)}"


# Streamlit UI Manager Class
class UIManager:
    """Manages the Streamlit UI components"""
    
    def __init__(self, db_manager: DatabaseManager, chat_manager: ChatManager):
        self.db = db_manager
        self.chat = chat_manager
        self.init_session_state()
    
    def init_session_state(self):
        """Initialize Streamlit session state variables"""
        if 'current_session_id' not in st.session_state:
            st.session_state.current_session_id = None
        if 'show_new_conversation_dialog' not in st.session_state:
            st.session_state.show_new_conversation_dialog = False
        if 'editing_title' not in st.session_state:
            st.session_state.editing_title = {}
        if 'sidebar_visible' not in st.session_state:
            st.session_state.sidebar_visible = True
        if 'selected_model' not in st.session_state:
            st.session_state.selected_model = "GPT-4.0"
    
    def render_sidebar(self):
        """Render the sidebar with all controls"""
        with st.sidebar:
            # Toggle sidebar button
            col1, col2 = st.columns([1, 5])
            with col1:
                if st.button("☰", key="toggle_sidebar", help="Toggle Sidebar"):
                    st.session_state.sidebar_visible = not st.session_state.sidebar_visible
                    st.rerun()
            
            if st.session_state.sidebar_visible:
                st.title("Chat Settings")
                
                # Model Selection
                st.subheader("Model Selection")
                models = list(self.chat.get_model_mapping().keys())
                
                # Get current model if session exists
                current_model = st.session_state.selected_model
                if st.session_state.current_session_id:
                    conv_details = self.db.get_conversation_details(st.session_state.current_session_id)
                    if conv_details:
                        current_model = conv_details['model']
                
                selected_model = st.selectbox(
                    "Select Model",
                    models,
                    index=models.index(current_model) if current_model in models else 0,
                    key="model_selector"
                )
                
                # Update model if changed and session exists
                if st.session_state.current_session_id and selected_model != current_model:
                    self.db.update_model(st.session_state.current_session_id, selected_model)
                
                st.session_state.selected_model = selected_model
                
                # Conversation History Section
                st.subheader("Conversation History")
                
                # New Conversation Button
                if st.button("➕ New Conversation", key="new_conv_btn", use_container_width=True):
                    st.session_state.show_new_conversation_dialog = True
                
                # List existing conversations
                conversations = self.db.get_all_conversations()
                
                for conv in conversations:
                    col1, col2, col3 = st.columns([6, 1, 1])
                    
                    with col1:
                        # Check if we're editing this title
                        if conv['session_id'] in st.session_state.editing_title:
                            new_title = st.text_input(
                                "Edit title",
                                value=conv['title'],
                                key=f"edit_{conv['session_id']}"
                            )
                            if st.button("Save", key=f"save_{conv['session_id']}"):
                                self.db.update_conversation_title(conv['session_id'], new_title)
                                del st.session_state.editing_title[conv['session_id']]
                                st.rerun()
                        else:
                            if st.button(
                                conv['title'],
                                key=f"conv_{conv['session_id']}",
                                use_container_width=True
                            ):
                                st.session_state.current_session_id = conv['session_id']
                                st.rerun()
                    
                    with col2:
                        if st.button("✏️", key=f"edit_btn_{conv['session_id']}", help="Edit title"):
                            st.session_state.editing_title[conv['session_id']] = True
                            st.rerun()
                    
                    with col3:
                        if st.button("❌", key=f"del_{conv['session_id']}", help="Delete conversation"):
                            self.db.delete_conversation(conv['session_id'])
                            if st.session_state.current_session_id == conv['session_id']:
                                st.session_state.current_session_id = None
                            st.rerun()
                
                # System Message Section
                if st.session_state.current_session_id:
                    st.subheader("System Message")
                    conv_details = self.db.get_conversation_details(st.session_state.current_session_id)
                    
                    system_message = st.text_area(
                        "System Message",
                        value=conv_details.get('system_message', '') if conv_details else '',
                        key="system_message_input",
                        height=100
                    )
                    
                    if st.button("Update System Message", key="update_sys_msg"):
                        self.db.update_system_message(st.session_state.current_session_id, system_message)
                        st.success("System message updated!")
                    
                    # File Upload Section
                    st.subheader("File Upload")
                    uploaded_file = st.file_uploader(
                        "Upload text file",
                        type=['txt'],
                        key="file_uploader"
                    )
                    
                    if uploaded_file is not None:
                        content = uploaded_file.read().decode('utf-8')
                        result = self.db.add_file(
                            st.session_state.current_session_id,
                            uploaded_file.name,
                            content
                        )
                        st.success(result)
                        st.rerun()
                    
                    # Display uploaded files
                    files = self.db.get_files(st.session_state.current_session_id)
                    if files:
                        st.write("Uploaded Files:")
                        for file in files:
                            col1, col2 = st.columns([4, 1])
                            with col1:
                                st.text(file['filename'])
                            with col2:
                                if st.button("🗑️", key=f"del_file_{file['id']}", help="Delete file"):
                                    self.db.delete_file(file['id'])
                                    st.rerun()
    
    def render_new_conversation_dialog(self):
        """Render dialog for creating new conversation"""
        if st.session_state.show_new_conversation_dialog:
            with st.container():
                st.subheader("Create New Conversation")
                title = st.text_input("Enter conversation title:", key="new_conv_title")
                
                col1, col2 = st.columns(2)
                with col1:
                    if st.button("Create", key="create_conv"):
                        if title:
                            session_id = self.db.create_conversation(
                                title,
                                st.session_state.selected_model
                            )
                            st.session_state.current_session_id = session_id
                            st.session_state.show_new_conversation_dialog = False
                            st.rerun()
                        else:
                            st.error("Please enter a title")
                
                with col2:
                    if st.button("Cancel", key="cancel_conv"):
                        st.session_state.show_new_conversation_dialog = False
                        st.rerun()
    
    def render_chat_interface(self):
        """Render the main chat interface"""
        st.title("AI Assistant Chat")
        
        if not st.session_state.current_session_id:
            st.info("Please create a new conversation or select an existing one from the sidebar.")
            return
        
        # Get conversation details
        conv_details = self.db.get_conversation_details(st.session_state.current_session_id)
        if not conv_details:
            st.error("Conversation not found!")
            return
        
        st.subheader(f"📝 {conv_details['title']}")
        
        # Display chat messages
        messages = self.db.get_messages(st.session_state.current_session_id)
        
        for msg in messages:
            with st.chat_message(msg['role']):
                st.write(msg['content'])
        
        # Chat input
        if prompt := st.chat_input("Type your message here..."):
            # Add user message to display
            with st.chat_message("user"):
                st.write(prompt)
            
            # Save user message to database
            self.db.add_message(st.session_state.current_session_id, "user", prompt)
            
            # Get files content
            files = self.db.get_files(st.session_state.current_session_id)
            file_contents = [file['content'] for file in files]
            
            # Prepare messages for API
            api_messages = self.chat.prepare_messages(
                conv_details.get('system_message', ''),
                messages + [{"role": "user", "content": prompt}],
                file_contents
            )
            
            # Get AI response
            with st.chat_message("assistant"):
                with st.spinner("Thinking..."):
                    response = self.chat.get_response(conv_details['model'], api_messages)
                st.write(response)
            
            # Save assistant message to database
            self.db.add_message(st.session_state.current_session_id, "assistant", response)
            st.rerun()


# Main Application
def main():
    """Main application entry point"""
    st.set_page_config(
        page_title="AI Assistant Chat",
        page_icon="🤖",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Initialize components
    api_key = os.getenv("OPENAI_API_KEY")
    if not api_key:
        st.error("Please set OPENAI_API_KEY in your .env file")
        st.stop()
    
    db_manager = DatabaseManager()
    chat_manager = ChatManager(api_key)
    ui_manager = UIManager(db_manager, chat_manager)
    
    # Render UI components
    ui_manager.render_sidebar()
    
    # Main chat area
    if st.session_state.show_new_conversation_dialog:
        ui_manager.render_new_conversation_dialog()
    else:
        ui_manager.render_chat_interface()


if __name__ == "__main__":
    main()
