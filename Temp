from pathlib import Path
from typing import Dict, List

# --- assume the enhanced pdf_to_jpgs you already have is imported ----------
# from my_module import pdf_to_jpgs

def batch_pdf_to_jpgs(
    input_root: str | Path = "Input_Files/HELIX",
    output_root: str | Path = "Output_Files/HELIX",
    dpi: int = 300,
    prefix: str = "page",
    **pdf_kwargs
) -> Dict[Path, List[Path]]:
    """
    Convert *every* PDF under `input_root` to JPG pages while mirroring
    the same directory structure under `output_root`.

    Parameters
    ----------
    input_root : str | Path
        Top-level folder containing sub-folders with PDFs.
    output_root : str | Path
        Where the page images will be written (mirrors input layout).
    dpi, prefix
        Passed straight through to `pdf_to_jpgs`.
    **pdf_kwargs
        Any extra args your pdf_to_jpgs version accepts (e.g., max_side).

    Returns
    -------
    Dict[Path, List[Path]]
        Mapping  {pdf_path : [generated_image_paths]}.
    """
    input_root  = Path(input_root).expanduser().resolve()
    output_root = Path(output_root).expanduser().resolve()

    results: Dict[Path, List[Path]] = {}

    for pdf_path in input_root.rglob("*.pdf"):
        # Relative sub-dir (e.g. Reauth_04) to reproduce under output_root
        rel_parent = pdf_path.parent.relative_to(input_root)
        out_dir    = output_root / rel_parent

        images = pdf_to_jpgs(
            pdf_path=pdf_path,
            output_dir=out_dir,
            dpi=dpi,
            prefix=prefix,
            **pdf_kwargs,
        )
        results[pdf_path] = images
        print(f"✓ {pdf_path}  ->  {len(images)} pages in {out_dir}")

    if not results:
        print(f"No PDFs found under {input_root}")

    return results


# ─── example run ──────────────────────────────────────────────────────────
# batch_pdf_to_jpgs()                    # uses defaults shown above
# batch_pdf_to_jpgs(dpi=300, max_side=2048)   # pass extras your helper supports
