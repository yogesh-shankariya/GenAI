"""
Detect follow-up / referral cues, and return both counts and matching sentences.
Requires: pyyaml, rapidfuzz   (pip install pyyaml rapidfuzz)
"""

import re
import yaml
from rapidfuzz import fuzz

# ------------------------------------------------------------------ #
# CONFIGURATION
# ------------------------------------------------------------------ #
RULE_FILE = "followup_referral_patterns.yaml"
FUZZY_THRESHOLD = 85                      # similarity score (0-100)

with open(RULE_FILE, "r") as fh:
    RULES = yaml.safe_load(fh)


# ------------------------------------------------------------------ #
# INTERNAL HELPERS
# ------------------------------------------------------------------ #
def _regex_hit(text: str, patterns: list[str]) -> bool:
    return any(re.search(pat, text, flags=re.I) for pat in patterns)


def _fuzzy_hit(text: str, phrases: list[str]) -> bool:
    lowered = text.lower()
    return any(fuzz.partial_ratio(p, lowered) >= FUZZY_THRESHOLD for p in phrases)


def _classify(sentence: str) -> tuple[bool, bool]:
    """Returns (is_followup, is_referral) for one sentence."""
    followup = (
        _regex_hit(sentence, RULES["followup"]["regex_patterns"])
        or _fuzzy_hit(sentence, RULES["followup"]["fuzzy_phrases"])
    )
    referral = (
        _regex_hit(sentence, RULES["referral"]["regex_patterns"])
        or _fuzzy_hit(sentence, RULES["referral"]["fuzzy_phrases"])
    )
    return followup, referral


# ------------------------------------------------------------------ #
# PUBLIC API
# ------------------------------------------------------------------ #
def analyse_note(text: str) -> dict[str, dict]:
    """
    Scan a clinical note and return:
        {
          "Referral": {"count": n, "matches": [sent1, …]},
          "Folow up": {"count": m, "matches": [sent2, …]}
        }
    """
    result = {
        "Referral": {"count": 0, "matches": []},
        "Folow up": {"count": 0, "matches": []},
    }

    # crude sentence splitter (period / question / exclamation)
    sentences = re.split(r"[.?!]\s+", text)

    for sent in filter(None, map(str.strip, sentences)):
        is_fu, is_ref = _classify(sent)
        if is_fu:
            result["Folow up"]["count"] += 1
            result["Folow up"]["matches"].append(sent)
        if is_ref:
            result["Referral"]["count"] += 1
            result["Referral"]["matches"].append(sent)

    return result


# ------------------------------------------------------------------ #
# DEMO
# ------------------------------------------------------------------ #
if __name__ == "__main__":
    note = (
        "Patient should maintain incisions clean and dry. "
        "I will refer her to Dr Gearard from Gastroenterology for chronic abd pain. "
        "RTC prn. "
        "Follow-up with OB/GYN and then consider referral to GI."
    )
    from pprint import pprint
    pprint(analyse_note(note))
