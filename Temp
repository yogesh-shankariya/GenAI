import re
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity
from langchain_openai import OpenAIEmbeddings
import os

# Embedding configuration (as per your environment)
embeddings = OpenAIEmbeddings(
    model="text-embedding-3-large",
    dimensions=3072,
    api_key=os.getenv('API_KEY'),
    base_url=os.getenv('API_BASE')
)

# Function to get embeddings using your embeddings object
def get_embedding(text):
    return embeddings.embed_query(text)

# Define your semantic labels
labels = {
    "follow-up": "Patient should return or revisit the clinic for further evaluation or treatment.",
    "referral": "Patient referred or consultation requested with a specialist or another department."
}

# Generate embeddings for labels
label_embeddings = {label: get_embedding(desc) for label, desc in labels.items()}

# Clinical note
note = "Patient advised RTC prn. Referral to GI if pain persists."

# Split into sentences
sentences = re.split(r"[.?!]\s+", note.strip())

# Similarity threshold
threshold = 0.80

# Classify sentences
for sentence in sentences:
    if sentence:
        sent_emb = get_embedding(sentence)
        for label, label_emb in label_embeddings.items():
            sim_score = cosine_similarity(
                [sent_emb],
                [label_emb]
            )[0][0]

            if sim_score >= threshold:
                print(f"{label.upper()}: '{sentence}' (score: {sim_score:.2f})")
